import { NextRequest, NextResponse } from 'next/server'
import { getPageData } from '@/lib/db'
import { mkdir, writeFile } from 'fs/promises'
import { join } from 'path'
import { safeJson } from '@/lib/api'
import { logger } from '@/lib/logger'

export async function POST(request: NextRequest) {
  try {
    const [body, jsonError] = await safeJson(request)
    if (jsonError) return jsonError

    const { project, page } = body as { project?: string; page?: string }

    if (!project || !page) {
      return NextResponse.json(
        { error: 'Missing required fields: project and page' },
        { status: 400 }
      )
    }

    logger.info(`Publishing ${project}/${page}...`)

    const pageData = await getPageData(project, page)

    if (!pageData) {
      return NextResponse.json(
        { error: 'Page not found' },
        { status: 404 }
      )
    }

    const html = generateHTMLDocument(
      pageData.gjs_html || '',
      pageData.gjs_css || '',
      page,
      project
    )

    try {
      const sitesDir = join(process.cwd(), '.next', 'cache', 'sites', project)
      await mkdir(sitesDir, { recursive: true })

      const filename = `${page}.html`
      const filepath = join(sitesDir, filename)
      await writeFile(filepath, html, 'utf8')

      const deploymentUrl = `/sites/${project}/${filename}`

      logger.info(`Published successfully: ${deploymentUrl}`)

      return NextResponse.json({
        success: true,
        deploymentUrl,
        message: `Page published successfully`,
        meta: {
          project,
          page,
          filename,
          publishedAt: new Date().toISOString(),
          size: html.length
        }
      })
    } catch (fsError) {
      logger.error('File system error:', fsError)
      return NextResponse.json(
        { error: 'Failed to write published file' },
        { status: 500 }
      )
    }

  } catch (error) {
    logger.error('Error in POST /api/publish:', error)
    return NextResponse.json(
      {
        error: 'Failed to publish page',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
}

function generateHTMLDocument(
  html: string,
  css: string,
  pageTitle: string,
  projectName: string
): string {
  return `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${pageTitle} - ${projectName}</title>
  <meta name="description" content="Generated by Designer Studio">
  <meta name="generator" content="Designer Studio">
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" rel="stylesheet">
  <style>
    * {
      box-sizing: border-box;
    }
    body {
      margin: 0;
      padding: 0;
      font-family: system-ui, -apple-system, sans-serif;
      line-height: 1.6;
    }
    .gjs-selected,
    .gjs-selected-parent,
    .gjs-dashed {
      outline: none !important;
      border: none !important;
    }
    ${css}
    @media (max-width: 768px) {
      .container, .container-fluid {
        padding-left: 15px;
        padding-right: 15px;
      }
    }
  </style>
</head>
<body>
  ${html}
  <script>
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
          target.scrollIntoView({ behavior: 'smooth' });
        }
      });
    });

    document.querySelectorAll('form').forEach(form => {
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        alert('Form submitted! (Demo mode)');
      });
    });

    document.querySelectorAll('button, .btn').forEach(btn => {
      if (!btn.getAttribute('href') && !btn.getAttribute('onclick')) {
        btn.addEventListener('click', function() {
          // No-op
        });
      }
    });
  </script>
</body>
</html>`
}
