<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/app/workspaces/[ws]/projects/[slug]/domains/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/workspaces/[ws]/projects/[slug]/domains/page.tsx" />
              <option name="originalContent" value="'use client'&#10;import { use, useState } from 'react'&#10;&#10;type Row = { id: string; domain: string; status: string; token?: string; verified_at?: string }&#10;&#10;export default function Domains(&#10;    { params }: { params: Promise&lt;{ ws: string; slug: string }&gt; }&#10;) {&#10;  // ✅ unwrap params&#10;  const { ws, slug } = use(params)&#10;  const [rows, setRows] = useState&lt;Row[]&gt;([])&#10;  const [domain, setDomain] = useState('')&#10;&#10;  function reload() {&#10;    fetch(`/api/domains?project=${slug}`).then(r =&gt; r.json()).then(setRows)&#10;  }&#10;&#10;  // dùng lazy revalidate&#10;  use(() =&gt; (reload(), Promise.resolve()))&#10;&#10;  async function addDomain() {&#10;    await fetch(`/api/domains?project=${slug}`, {&#10;      method: 'POST', headers: { 'content-type': 'application/json' }, body: JSON.stringify({ domain })&#10;    })&#10;    setDomain(''); reload()&#10;  }&#10;&#10;  async function verify(d: string) {&#10;    const r = await fetch(`/api/domains/verify?project=${slug}`, {&#10;      method: 'POST', headers: { 'content-type': 'application/json' }, body: JSON.stringify({ domain: d })&#10;    })&#10;    const data = await r.json()&#10;    if (data?.verified) reload()&#10;  }&#10;&#10;  return (&#10;      &lt;main className=&quot;p-6 space-y-6&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;          &lt;h1 className=&quot;text-2xl font-bold&quot;&gt;Custom Domains – {slug}&lt;/h1&gt;&#10;          &lt;a className=&quot;underline&quot; href={`/workspaces/${ws}/projects`}&gt;Back&lt;/a&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;border rounded p-4 space-y-2&quot;&gt;&#10;          &lt;div className=&quot;font-medium&quot;&gt;Add Custom Domain&lt;/div&gt;&#10;          &lt;div className=&quot;flex gap-2&quot;&gt;&#10;            &lt;input className=&quot;border p-2 flex-1&quot; placeholder=&quot;e.g., site.example.com&quot; value={domain} onChange={e =&gt; setDomain(e.target.value)} /&gt;&#10;            &lt;button onClick={addDomain} className=&quot;border px-3 py-2 rounded&quot;&gt;Create&lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;space-y-3&quot;&gt;&#10;          {rows.map((r, i) =&gt; (&#10;              &lt;div key={i} className=&quot;border rounded p-4&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;div className=&quot;font-medium&quot;&gt;{r.domain}&lt;/div&gt;&#10;                    &lt;div className=&quot;text-sm text-gray-500&quot;&gt;Status: {r.status}&lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;button onClick={() =&gt; verify(r.domain)} className=&quot;border px-3 py-2 rounded&quot;&gt;Verify&lt;/button&gt;&#10;                &lt;/div&gt;&#10;                {r.token &amp;&amp; (&#10;                    &lt;div className=&quot;mt-3 text-sm&quot;&gt;&#10;                      &lt;div className=&quot;font-medium mb-1&quot;&gt;DNS instructions&lt;/div&gt;&#10;                      &lt;code className=&quot;block&quot;&gt;TXT  _verify.{r.domain}  {r.token}&lt;/code&gt;&#10;                      &lt;div className=&quot;mt-1 opacity-80&quot;&gt;&#10;                        Then CNAME &lt;b&gt;{r.domain}&lt;/b&gt; → &lt;b&gt;{process.env.NEXT_PUBLIC_BASE_DOMAIN || 'pages.yourdomain.com'}&lt;/b&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;      &lt;/main&gt;&#10;  )&#10;}&#10;" />
              <option name="updatedContent" value="'use client'&#10;import { use, useState } from 'react'&#10;&#10;type Row = { id: string; domain: string; status: string; token?: string; verified_at?: string }&#10;&#10;export default function Domains(&#10;    { params }: { params: Promise&lt;{ ws: string; slug: string }&gt; }&#10;) {&#10;  // ✅ unwrap params&#10;  const { ws, slug } = use(params)&#10;  const [rows, setRows] = useState&lt;Row[]&gt;([])&#10;  const [domain, setDomain] = useState('')&#10;&#10;  function reload() {&#10;    fetch(`/api/domains?project=${slug}`).then(r =&gt; r.json()).then(setRows)&#10;  }&#10;&#10;  // dùng lazy revalidate&#10;  use(() =&gt; (reload(), Promise.resolve()))&#10;&#10;  async function addDomain() {&#10;    await fetch(`/api/domains?project=${slug}`, {&#10;      method: 'POST', headers: { 'content-type': 'application/json' }, body: JSON.stringify({ domain })&#10;    })&#10;    setDomain(''); reload()&#10;  }&#10;&#10;  async function verify(d: string) {&#10;    const r = await fetch(`/api/domains/verify?project=${slug}`, {&#10;      method: 'POST', headers: { 'content-type': 'application/json' }, body: JSON.stringify({ domain: d })&#10;    })&#10;    const data = await r.json()&#10;    if (data?.verified) reload()&#10;  }&#10;&#10;  return (&#10;      &lt;main className=&quot;p-6 space-y-6&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;          &lt;h1 className=&quot;text-2xl font-bold&quot;&gt;Custom Domains – {slug}&lt;/h1&gt;&#10;          &lt;a className=&quot;underline&quot; href={`/workspaces/${ws}/projects`}&gt;Back&lt;/a&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;border rounded p-4 space-y-2&quot;&gt;&#10;          &lt;div className=&quot;font-medium&quot;&gt;Add Custom Domain&lt;/div&gt;&#10;          &lt;div className=&quot;flex gap-2&quot;&gt;&#10;            &lt;input className=&quot;border p-2 flex-1&quot; placeholder=&quot;e.g., site.example.com&quot; value={domain} onChange={e =&gt; setDomain(e.target.value)} /&gt;&#10;            &lt;button onClick={addDomain} className=&quot;border px-3 py-2 rounded&quot;&gt;Create&lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;space-y-3&quot;&gt;&#10;          {rows.map((r, i) =&gt; (&#10;              &lt;div key={i} className=&quot;border rounded p-4&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;div className=&quot;font-medium&quot;&gt;{r.domain}&lt;/div&gt;&#10;                    &lt;div className=&quot;text-sm text-gray-500&quot;&gt;Status: {r.status}&lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;button onClick={() =&gt; verify(r.domain)} className=&quot;border px-3 py-2 rounded&quot;&gt;Verify&lt;/button&gt;&#10;                &lt;/div&gt;&#10;                {r.token &amp;&amp; (&#10;                    &lt;div className=&quot;mt-3 text-sm&quot;&gt;&#10;                      &lt;div className=&quot;font-medium mb-1&quot;&gt;DNS instructions&lt;/div&gt;&#10;                      &lt;code className=&quot;block&quot;&gt;TXT  _verify.{r.domain}  {r.token}&lt;/code&gt;&#10;                      &lt;div className=&quot;mt-1 opacity-80&quot;&gt;&#10;                        Then CNAME &lt;b&gt;{r.domain}&lt;/b&gt; → &lt;b&gt;{process.env.NEXT_PUBLIC_BASE_DOMAIN || 'designer.edu.vn'}&lt;/b&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;      &lt;/main&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>